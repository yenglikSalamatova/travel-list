import { useState } from "react";

export default function App() {
  const [items, setItems] = useState([]);

  function handleAddItems(item) {
    setItems((items) => [...items, item]);
  }

  function handleDeleteItem(id) {
    setItems((items) => items.filter((item) => item.id !== id));
  }

  function handleToggleItem(id) {
    setItems((items) =>
      items.map((item) =>
        item.id === id ? { ...item, packed: !item.packed } : item
      )
    );
  }
  function handleClearItems() {
    const confirm = window.confirm("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫?");
    if (confirm) {
      setItems([]);
    }
  }

  return (
    <div className="container">
      <div className="app">
        <Logo />
        <Form onAddItem={handleAddItems} />
        <PackingList
          items={items}
          onDeleteItem={handleDeleteItem}
          onToggleItem={handleToggleItem}
          onClearItems={handleClearItems}
        />
        <Stats items={items} />
        <div className="bg"></div>
      </div>
    </div>
  );
}

function Logo() {
  return <h1>üå¥–°–ø–∏—Å–æ–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏</h1>;
}

function Form({ onAddItem }) {
  const [description, setDescription] = useState("");
  const [quantity, setQuantity] = useState(1);

  function handleSubmit(e) {
    e.preventDefault();
    if (!description) return;
    const newItem = { description, quantity, packed: false, id: Date.now() };
    console.log(newItem);

    onAddItem(newItem);

    setDescription("");
    setQuantity(1);
  }

  return (
    <form className="add-form" onSubmit={handleSubmit}>
      <h3>–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è? üòç</h3>
      <div className="form-input">
        <select value={quantity} onChange={(e) => setQuantity(+e.target.value)}>
          {Array.from({ length: 20 }, (_, i) => i + 1).map((num) => (
            <option value={num} key={num}>
              {num}
            </option>
          ))}
        </select>
        <input
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–µ—â–∏"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <button type="submit">–î–æ–±–∞–≤–∏—Ç—å</button>
      </div>
    </form>
  );
}

function PackingList({ items, onDeleteItem, onToggleItem, onClearItems }) {
  const [sortBy, setSortBy] = useState("input");

  let sortedItems;

  if (sortBy === "input") sortedItems = items;

  if (sortBy === "description")
    sortedItems = items
      .slice()
      .sort((a, b) => a.description.localeCompare(b.description));

  if (sortBy === "packed")
    sortedItems = items
      .slice()
      .sort((a, b) => Number(a.packed) - Number(b.packed));

  return (
    <div className="list">
      <ul>
        {sortedItems.map((item) => (
          <Item
            item={item}
            key={item.id}
            onDeleteItem={onDeleteItem}
            onToggleItem={onToggleItem}
          />
        ))}
      </ul>
      <div className="actions">
        <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
          <option value="input">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</option>
          <option value="description">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É</option>
          <option value="packed">–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏</option>
        </select>
        <button onClick={onClearItems}>–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫</button>
      </div>
    </div>
  );
}

function Item({ item, onDeleteItem, onToggleItem }) {
  return (
    <li>
      <input
        type="checkbox"
        value={item.packed}
        onChange={() => {
          onToggleItem(item.id);
        }}
      />
      <span style={item.packed ? { textDecoration: "line-through" } : {}}>
        {item.quantity} {item.description}
      </span>
      <button onClick={() => onDeleteItem(item.id)}>‚ùå</button>
    </li>
  );
}

function Stats({ items }) {
  if (!items.length)
    return (
      <p className="stats">
        <em>–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤–µ—â–µ–π –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ :)</em>
      </p>
    );
  const numItems = items.length;
  const numPacked = items.filter((item) => item.packed).length;
  const percentage = Math.round((numPacked / numItems) * 100);
  return (
    <footer className="stats">
      <em>
        {percentage === 100
          ? "–£ –≤–∞—Å –≤—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–µ–∑–¥–∫–µ!"
          : `–£ –≤–∞—Å ${numItems} –≤–µ—â–µ–π –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –∏ –≤—ã —É–∂–µ —É–ø–∞–∫–æ–≤–∞–ª–∏ ${numPacked} (
        ${percentage}%)`}
      </em>{" "}
    </footer>
  );
}
